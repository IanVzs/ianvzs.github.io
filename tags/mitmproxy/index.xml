<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mitmproxy on Ian's Blog</title><link>http://example.org/tags/mitmproxy/</link><description>Recent content in mitmproxy on Ian's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 18 Jul 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://example.org/tags/mitmproxy/index.xml" rel="self" type="application/rss+xml"/><item><title>mitmproxy</title><link>http://example.org/docs/programmer/net/crawler/mitmproxy/</link><pubDate>Thu, 18 Jul 2024 00:00:00 +0000</pubDate><guid>http://example.org/docs/programmer/net/crawler/mitmproxy/</guid><description> 安装 # 代码示例 # #!/bin/env python import asyncio import sys from mitmproxy import options from mitmproxy.tools import dump class RequestLogger: def request(self, flow): print(flow.request.url) def response(self, flow): print(f&amp;#34;rsp; {flow.response.headers}&amp;#34;) async def start_proxy(host, port): opts = options.Options(listen_host=host, listen_port=port) master = dump.DumpMaster( opts, with_termlog=False, with_dumper=False, ) master.addons.add(RequestLogger()) await master.run() return master if __name__ == &amp;#39;__main__&amp;#39;: host=sys.argv[1] port=int(sys.argv[2]) asyncio.run(start_proxy(host, port))</description></item></channel></rss>