<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on Ian&#39;s Blog</title>
    <link>http://example.org/tags/python/</link>
    <description>Recent content in python on Ian&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="http://example.org/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python笔记(notes of Python)</title>
      <link>http://example.org/docs/programmer/langs/notespython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/programmer/langs/notespython/</guid>
      <description>author:Ian
彻底摆脱to_dict和from_dict # 使用 pydantic # BaseModel类型支持:
b = BattleAxiePositionInfo.parse_obj(DICT_DATA) b.json() b.dict() parse_file parse_raw from pydantic import BaseModel class PositionInfo(BaseModel): error: int = -1 # 收集错误 none: int = 0 # 还没开始 clicked: int = 1 # 在client 赋此值 done: int = 2 # 在server 赋此值 xy: List[int] = [0, 0] status: int = 0 # clicked or done or none or error class BattleAxiePositionInfo(BaseModel): our: List[PositionInfo] = [PositionInfo(), PositionInfo(), PositionInfo(), PositionInfo(), PositionInfo(), PositionInfo()] enemy: List[PositionInfo] = [PositionInfo(), PositionInfo(), PositionInfo(), PositionInfo(), PositionInfo(), PositionInfo()] pp = BattleAxiePositionInfo() print(f&amp;#34;pp json: {pp.</description>
    </item>
    
    <item>
      <title>图形化界面 （Python Gui）</title>
      <link>http://example.org/docs/programmer/gui/notespython/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/programmer/gui/notespython/</guid>
      <description>author:Ian
Python GUI 💽 # PyQt # 官方说明文档：http://pyqt.sourceforge.net/Docs/PyQt4/index.html 照例，先贴网址： http://www.qaulau.com/books/PyQt4_Tutorial/index.html
画界面 # #PyQt4使用designer.exe import os for root, dirs, files in os.walk(&#39;.&#39;): for file in files: if file.endswith(&#39;.ui&#39;): os.system(&#39;pyuic4 -o ui_%s.py %s&#39; % (file.rsplit(&#39;.&#39;, 1)[0], file)) elif file.endswith(&#39;.qrc&#39;): os.system(&#39;pyrcc4 -o %s_rc.py %s&#39; % (file.rsplit(&#39;.&#39;, 1)[0], file)) # 注：在Win中调用pyrcc4 可能无法识别该命令，即使添加到环境变量也不行，而是 #pyrcc.exe才能调用简直…… 窗口设置 # resize(8, 8) setWindowTitle(u&#39;标题&#39;) 获取图标 # def getIcon(filename): &amp;quot;&amp;quot;&amp;quot; 获取图标 &amp;quot;&amp;quot;&amp;quot; fileInfo = Qt.QFileInfo(filename) fileIcon = Qt.QFileIconProvider() icon = QtGui.QIcon(fileIcon.icon(fileInfo)) return icon 使用时： self.</description>
    </item>
    
    <item>
      <title>机器学习库</title>
      <link>http://example.org/docs/programmer/ml/noteofmachinelearning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/docs/programmer/ml/noteofmachinelearning/</guid>
      <description>Python 机器学习库 👽 # Plotly # 与matplotlib 都是绘图工具，不过效果炫一些，我也没画过，所以只放链接，不放实例了 Plotly Python Library : https://plot.ly/python/
matplotlib # import matplotlib.pyplot as plt 参数等太多，链接最可靠 # pyplot参数
还是粘一些常用的： marker 属性（下面写在分号里呦） o . v ^ &amp;lt; &amp;gt; 1 2 3 4 8 s p * h H + x D d | _ 之类
画出一些“花儿”
绘图 # plt.plot(x, y) # 在y之后可添加参数，例如常用的label = ‘IamLabel’之类 # 线的样式、颜色 ：b: blue g: green r: red c: cyan m: magenta y: yellow k: black w: white &#39;-&#39; : solid , &#39;--&#39; : dashed, &#39;-.</description>
    </item>
    
  </channel>
</rss>
