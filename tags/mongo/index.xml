<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mongo on Ian's Blog</title><link>http://example.org/tags/mongo/</link><description>Recent content in mongo on Ian's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 24 Sep 2023 23:02:41 +0000</lastBuildDate><atom:link href="http://example.org/tags/mongo/index.xml" rel="self" type="application/rss+xml"/><item><title>Mongodb使用记录</title><link>http://example.org/docs/programmer/database/mongodb/</link><pubDate>Sun, 24 Sep 2023 23:02:41 +0000</pubDate><guid>http://example.org/docs/programmer/database/mongodb/</guid><description>安装 # Docker 安装 4.4.12版本 # pull: docker pull mongo:4.4.13 run: docker run -itd --name mongo --restart=always \ -v /mongodb/datadb:/data/db \ -p 27017:27017 \ --network websafe-network \ --privileged=true mongo:4.4.12 进入容器docker exec -it mongo bash后:
mongo use admin # db.createUser({user: &amp;#34;admin&amp;#34;, pwd: &amp;#34;admin&amp;#34;, roles: [{role: &amp;#34;root&amp;#34;, db: &amp;#34;admin&amp;#34;}]}) # db.createUser({user: &amp;#34;admin&amp;#34;, pwd: &amp;#34;admin&amp;#34;, roles: [{role: &amp;#34;userAdminAnyDatabase&amp;#34;, db: &amp;#34;admin&amp;#34;}]}) # 如果能auth就不用createUser了 db.auth(&amp;#34;admin&amp;#34;, &amp;#34;admin&amp;#34;) 网上传的将 MONGO_INITDB_ROOT_PASSWORD 和 MONGO_INITDB_ROOT_USERNAME传入环境变量的方式，在mongo4.4.12 和 4.4.13上都不好使。</description></item><item><title>数据库-MongoDB篇</title><link>http://example.org/docs/programmer/database/note-of-db-data-mongodb/</link><pubDate>Tue, 15 May 2018 09:51:09 +0000</pubDate><guid>http://example.org/docs/programmer/database/note-of-db-data-mongodb/</guid><description>DB数据库 🖥 📊🖥 # MongoDB笔记 # 学习网站：http://www.runoob.com/mongodb/mongodb-tutorial.html (其学习教程还挺可观，很多，不过还不清楚好不好)
数据迁移 # insert into device_data_current select * from device_data; 使用 mysqldump # 很慢 很大 很方便 很！不好！使用！在使用&amp;ndash;host时 下面命令没一次正常工作的，很难受
mysqldump -h192.168.0.25 -u{user} -p{passwd} {dbname} {tablename} &amp;gt; {tablename}.sql sed -i &amp;#39;s/{tablename}/{new_tablename}/g&amp;#39; {tablename}.sql mysql -u{user} -p{passwd} {dbname} &amp;lt; {table}.sql # 增加条数限制 bash-4.2# mysqldump -u{user} -p{passwd} test demo --host {host} --where=&amp;#34;true limit 5000&amp;#34; &amp;gt; demo.sql 还是用自己写的脚本好使 sql_one2one.py
注意事项 # Mongo 数据库锁 # mongo只提供库级粒度锁，所以一个写操作锁定时，其他读写操作都等待… 所以这个导致了Mongo多线程写操作反而没有一个线程写来的快？
前台建立索引时，Mongo需占用一个写锁（且不同上述、不会临时放弃） 为避免此问题需采用background方式</description></item><item><title>数据库-MongoDB篇</title><link>http://example.org/docs/programmer/database/note-of-db-data/</link><pubDate>Tue, 15 May 2018 09:51:09 +0000</pubDate><guid>http://example.org/docs/programmer/database/note-of-db-data/</guid><description>DB数据库 🖥 📊🖥 # MongoDB笔记 # 学习网站：http://www.runoob.com/mongodb/mongodb-tutorial.html (其学习教程还挺可观，很多，不过还不清楚好不好)
数据迁移 # insert into device_data_current select * from device_data; 使用 mysqldump # 很慢 很大 很方便 很！不好！使用！在使用&amp;ndash;host时 下面命令没一次正常工作的，很难受
mysqldump -h192.168.0.25 -u{user} -p{passwd} {dbname} {tablename} &amp;gt; {tablename}.sql sed -i &amp;#39;s/{tablename}/{new_tablename}/g&amp;#39; {tablename}.sql mysql -u{user} -p{passwd} {dbname} &amp;lt; {table}.sql # 增加条数限制 bash-4.2# mysqldump -u{user} -p{passwd} test demo --host {host} --where=&amp;#34;true limit 5000&amp;#34; &amp;gt; demo.sql 还是用自己写的脚本好使 sql_one2one.py
注意事项 # Mongo 数据库锁 # mongo只提供库级粒度锁，所以一个写操作锁定时，其他读写操作都等待… 所以这个导致了Mongo多线程写操作反而没有一个线程写来的快？
前台建立索引时，Mongo需占用一个写锁（且不同上述、不会临时放弃） 为避免此问题需采用background方式</description></item></channel></rss>