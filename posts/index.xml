<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Ian's Blog</title><link>http://example.org/posts/</link><description>Recent content in Blog on Ian's Blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 18 Jun 2024 23:03:41 +0000</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Japanese Learning</title><link>http://example.org/posts/japanese/</link><pubDate>Tue, 08 Nov 2016 00:00:00 +0000</pubDate><guid>http://example.org/posts/japanese/</guid><description>より、ほど # 2月は　1月より　ずっど　寒いです。 1がつは　2月ほど　さむくないです（寒くない）。 ーーーー比较 前，肯定，后否定。 1月より　2月ほうが　寒いです。 家族で誰が　一番歌が上手ですか。 ーーーより被比者　ほが选定者、更加者 ーーーで：划分范围　いちばん：最高 1月と　2月と　とどちらが　寒いですか。 ...2月のほうが寒いです。 ーー二选一句型。...と..と　答句：のほうがーー更～冷。 ほうが　いいです　一类形/二类形 ほうが　いいです いる：犬がいる　有狗 N-&amp;gt;N 窗那儿有的人 # 变化 # いー＞く　+なる（なります)　だー＞に　+する（します） 成为…变成… 使成/变为… # 前者，无主观后者有主观要变 二类形/名 に　なります　&amp;hellip;に　します 变成某种N ーーー性质状态发生变化 后者因主语意志、动作引起　電気を消し（けし）で、暗（くら）くします。　もう春になったから、暖かくなる。　（あたたかい）　夜（よる）に　なりました。部屋が暗くなりました。　名词に　します。要什么 息子は　医者に　なります。　話を　簡単（かんたん）に　します。 今年（ことし）七歳に　なりました。 欲しい　なりました</description></item><item><title>杂笔记</title><link>http://example.org/posts/some-notes-can-make-things-easier-and-more-enjoyable/</link><pubDate>Sat, 29 Oct 2016 00:00:00 +0000</pubDate><guid>http://example.org/posts/some-notes-can-make-things-easier-and-more-enjoyable/</guid><description>Swift： # [Swift教程] # &amp;gt;https://github.com/ipader/SwiftGuide; Swift 开源项目精选: # &amp;gt;https://github.com/ipader/SwiftGuide/blob/master/Featured.md SwiftGuide: # &amp;gt;https://github.com/ipader/SwiftGuide/blob/master/Featured-Articles.md Swift，以上。
Pelican： # 高亮显示Markdown: # void main() { printf(&amp;quot;高亮？&amp;quot;); // 另起一行 首行缩进，书写即可 } 标题： # 在编辑文字的时候，在前面加上“#”号，可以将之后一行文字作为标题大字体显示，编辑中瞎按，手误敲出来的字符，结果却很有用呢。或许其他字符也有作用，不过这已经满足日常编辑所需，不做过多探究了。充实内容，往往是首要的。
利用Disqus添加评论系统： # 在此网站注册一个帐号，在设置中找见shortname，应该为自己设置。 然后在Pelicanconf.py这个配置文件中添加
:::iidentifier
DISQUS_SITENAME = “yours shortname”
贴图片： # 在国内找了一个Z4A图床，感觉不错。 注册完毕，上传好图片应用链接自动生成，直接诶复制粘贴即可。HTML、BBCode、Markdown的，另外分为完整图片，中等图片，缩略图三种不同尺寸的链接。感觉良心。另外，点击图片后跳转图床，可以查看原图片文件，更是舒心赏心悦目～ 免费使用，极力推荐。只不过图片不能加入缩进后的“代码栏”。
数学公式： $ $e^{i\pi} + 1 = 0$ $ $之间无空格
$$e^{i\pi} + 1 = 0$$
失败……插入插件失败。之后有需要时再查找原因。 (不过这个图床已经废了。……默哀)
Linux 嵌入式C編程 # Git 协助开发提交代码之类 参考流程（复制于 &amp;gt;https://github.com/numbbbbb/the-swift-programming-language-in-chinese） 有些朋友可能不太清楚如何帮忙翻译，我这里写一个简单的流程，大家可以参考一下： 首先fork我的项目 把fork过去的项目也就是你的项目clone到你的本地 在命令行运行git branch develop来创建一个新分支 运行git checkout develop来切换到新分支 运行git remote add upstream https://github.</description></item><item><title>Make things easy and enjoy</title><link>http://example.org/posts/make-things-easy-and-enjoyable/</link><pubDate>Sat, 08 Oct 2016 16:58:56 +0000</pubDate><guid>http://example.org/posts/make-things-easy-and-enjoyable/</guid><description>命令行的简便生活 💦🤣 # 后传: [[小命令]]
VirtualBox: linux 没有权限访问共享文件夹的问题 # 错误原因及解决办法
这个自动mount的文件夹linux_share的所有者为root，所属的组是vboxsf，并且只有这两个用户有访问权限。Virtualbox的共享文件夹一般都挂载在/media下面，用ll查看会发现文件夹的所有者是root，所有组是vboxsf，所以文件管理去无法访问是正常的，解决方法是把你自己加入到vboxsf组里面。
# 把自己添加到这个vboxsf组里面: sudo usermod -a -G vboxsf {USERNAME} 需要重启机器才能生效
Delete Git Submodule # 逆初始化模块，其中{MOD_NAME}为模块目录，执行后可发现模块目录被清空 git submodule deinit {MOD_NAME} 删除.gitmodules中记录的模块信息（&amp;ndash;cached选项清除.git/modules中的缓存） git rm --cached {MOD_NAME} apt 安装前查看库里版本 # sudo apt-cache madison kdenlive 4K显示器软件不适配导致的字太小问题 # 在路径: /usr/share/applications下 将对应的.desktop文件使用文本编辑器打开,将Exec修改为:
Exec=env QT_DEVICE_PIXEL_RATIO=2 /opt/resolve/bin/resolve 主要是增加env QT_DEVICE_PIXEL_RATIO=2, 上述例中所示为达芬奇的配置. (不过很可惜它并不能和我的AMD 5700g+Ubuntu22.04+不知哪儿来的驱动一起工作. 虽然确实变好了.)
切换用户默认终端程序 # 赢在起跑线: useradd -s /bin/bash ian 力挽狂澜: usermod -s /bin/bash ian 奋起反抗: chsh + 按提示操作 Github Personal access tokens # github 干掉了https账号密码pull push 之后 https pull push 专用 url</description></item><item><title>Daily Notes</title><link>http://example.org/posts/daily-notes/</link><pubDate>Thu, 14 Jul 2016 00:00:00 +0000</pubDate><guid>http://example.org/posts/daily-notes/</guid><description>2021年09月26日 测试一下是不是能挂视频呢：
2021年09月09日 今天重新弄了blog,增加了Makefile可以更加无闹化的操作了 真是个好东西 不过hexo deploy放在里面一直出问题，重新执行一遍又好了不清楚啥原因。。。分不同的make子项试试
同时也换了背景，一会儿打个release去.
缅怀
2018年12月12日 今儿开始，以后信笔记就写在上面了——本来笔记就没顺序，而考虑翻看的时候总是翻页太麻烦，emm 虽说越来越习惯grep但 …有时候还是要看网页的嘛。而新笔记的翻看率总是高过旧笔记，所以就用这个顺序~😄
Eeont size=4&amp;gt;原因：
今天决定每天都写每日的学习总结，以此来激励。否则每天下来总觉得毫无收获，颇有空虚寂寞冷的感觉，也有当天学习的不真实感。此文章做做总概，目录的作用，详细的学习笔记就写在详细的文章下面。
因为，暑假要学习日语，所以日常生活中能用日记就尽量用了。对于培养日语语感和结构的记忆及习惯，很有作用。 日语
16-07-14 用于比较的句型：より　ほど 变化、使变化的句式。 16-07-16 昨天用的Winodos所以没发写了。 重新记了初上的18课内容。 16-07-18 B站上的每晚一句感觉不错。因为是长句嘛，能够更加详细了解句子逻辑和词语使用规律 16-07-19 復習 Pelican
16-07-14 换了一个更加清明的主题，能够能好的搜索，并且显示格式也很顺眼。而且能够自动形成Tags等的文章链接。基本上满足我的写作还有以后用来搜索的需求了。而且也很简约漂亮。 明天再学习一些嵌入式以及Linux的内容～ 16-07-19 插入图片：图床 评论系统：Disqus 数学公式：latex
Linux
16-07-16 SSH rsync VNC 等命令的学习和使用。为此，倒是专门安装了一个Ubuntu的Servery版本的虚拟机。 16-07-17 disk LVM 16-07-18 复习了一些网络部分。 16-07-18 Vi &amp;amp;&amp;amp; Vim 果然在了解了一些按鍵的作用之後感覺無愧‘於編輯器之神’的稱號。輸入法不小心點成繁體了，懶得改回簡體————或許有‘懶’的比賽我能進三甲。 16-07-26 這兩三天看了看 嵌入式的ARM系列板開發，當然主要看了看Linux 移植一類。只不過說是教程也不過是流程吧。通篇下來基本上用的最多的語句即使 把這個這樣，那個這樣一下。具體爲什麼全然わかりませんね！ 不過也沒關係，留下來自己回頭再看看就行了。後面再看一下Qt程序的移植就可以完美收官了，在嵌入式的領域。 16-08-03 看完了——只不過很可惜沒有實驗板，所以不能進行實驗。開學之後在學校吧。當然，學習斷線了一些時候，嗯嗯…… 16-08-11 musicbox Nethack ————A Game
還沒玩，或者說還沒看說明手冊先瞎玩一氣。雖說有一塌糊塗，不過我有預感，這確實是一款很好的自由地牢遊戲。 Blender ーー建模 動畫軟件</description></item><item><title>安卓玩机</title><link>http://example.org/posts/android%E7%8E%A9%E6%9C%BA/</link><pubDate>Tue, 18 Jun 2024 23:03:41 +0000</pubDate><guid>http://example.org/posts/android%E7%8E%A9%E6%9C%BA/</guid><description> shizuku # 启动命令:
adb shell sh /storage/emulated/0/Android/data/moe.shizuku.privileged.api/start.sh 自动任务 AutoTask # 自动化任务
Scene # 查看安卓进程管理
App Ops # App权限监测
ADB # 设置http代理 # adb shell settings put global http_proxy 192.168.105.230:8080 adb shell settings put global https_proxy 192.168.105.230:8080 # 删除代理 adb shell settings delete global http_proxy Deleted 1 rows adb shell settings delete global https_proxy Deleted 1 rows adb shell settings delete global global_http_proxy_host Deleted 1 rows adb shell settings delete global global_https_proxy_host Deleted 0 rows adb shell settings delete global global_http_proxy_port Deleted 1 rows adb shell settings delete global global_https_proxy_port Deleted 0 rows # 需要冲起生效 - 有的机器可能不用 adb reboot</description></item><item><title>小命令</title><link>http://example.org/posts/%E5%B0%8F%E5%91%BD%E4%BB%A4/</link><pubDate>Sun, 24 Sep 2023 23:03:41 +0000</pubDate><guid>http://example.org/posts/%E5%B0%8F%E5%91%BD%E4%BB%A4/</guid><description>前传: [[Make things easy and enjoyable]]
1. 递归删除某些文件 # 如以.py.bak 为结尾的文件: find . -name &amp;quot;*.py.bak&amp;quot; -exec rm {} \;
2. 批量杀死进程 # pkill -f uwsgi ps -axu | grep 关键字 | awk &amp;#39;{print $2}&amp;#39; | xargs kill 批量删除pod - xargs 的使用 # kubectl get pod -n argo | grep workflow-template | awk &amp;#39;{print $1}&amp;#39; | xargs kubectl -n argo delete pod 3. MySQL NOW # 指定东八：update scanner_device set update_time = CONVERT_TZ(NOW(), @@session.</description></item><item><title>My First Post</title><link>http://example.org/posts/my-first-post/</link><pubDate>Mon, 24 Oct 2022 01:47:22 +0000</pubDate><guid>http://example.org/posts/my-first-post/</guid><description>Hello World # Hello, World</description></item><item><title>GPT技术分享</title><link>http://example.org/posts/gpt_share/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>http://example.org/posts/gpt_share/</guid><description>GPT技术分享 # 先介绍几个名词 # GPT 和 ChatGPT # Generative Pre-Training Transformer 是一种基于Transformer架构的预训练语言模型.
我们所接触到的chatgpt是针对gpt3.5模型的一种应用实例, 如今chatgpt已经为会员用户切换为gpt4.0模型. 未来短期时间内应该不会开放给免费用户使用.
GPT模型本质是续写模型, 它根据输入的文本生成相应的续写文本, 从而实现对话、文章等自然语言文本的生成. 所以其并不具备实际的创新能力, 只能对以往的“经验”做出梳理.
LLMs # Large language models (LLMs)大语言模型, 包括GPT和GLM等, 是一个统称. 以下是这个统称下的不同模型架构：
主流预训练模型架构 # autoregressive自回归模型（AR模型）：代表作GPT. 本质上是一个left-to-right的语言模型. 通常用于生成式任务, 在长文本生成方面取得了巨大的成功, 比如自然语言生成（NLG）领域的任务：摘要、翻译或抽象问答. 当扩展到十亿级别参数时, 表现出了少样本学习能力. 缺点是单向注意力机制, 在NLU任务中, 无法完全捕捉上下文的依赖关系.
autoencoding自编码模型（AE模型）：代表作BERT. 是通过某个降噪目标（比如MLM）训练的双向文本编码器. 编码器会产出适用于NLU任务的上下文表示, 擅长领域主要是自然语言处理领域, 例如文本分类、命名实体识别、情感分析、问答系统等. 但无法直接用于文本生成.
encoder-decoder（Seq2seq模型）：代表作T5. 采用双向注意力机制, 通常用于条件生成任务, 比如文本摘要、机器翻译等.
GLM模型基于autoregressive blank infilling方法, 结合了上述三种预训练模型的思想, 代表有清华大学的ChatGLM
LoRA和Prompt # Prompt 提示词, 是一种用于指导模型生成输出的文本片段, Prompt通常包含一些关键词或短语, 用于提示模型生成特定类型的文本. Prompt的使用可以提高模型的生成效果和准确性, 特别是在处理特定领域的文本时. 通过使用Prompt, 模型可以更好地理解输入文本的含义和上下文信息, 从而生成更加符合要求的输出文本. LoRA英文全称Low-Rank Adaptation of Large Language Models, 直译为大语言模型的低阶适应, 是一种PEFT（参数高效性微调方法）, 这是微软的研究人员为了解决大语言模型微调而开发的一项技术.</description></item><item><title>GPT技术分享</title><link>http://example.org/posts/gpt%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>http://example.org/posts/gpt%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/</guid><description>GPT技术分享 # 先介绍几个名词 # GPT 和 ChatGPT # Generative Pre-Training Transformer 是一种基于Transformer架构的预训练语言模型.
我们所接触到的chatgpt是针对gpt3.5模型的一种应用实例, 如今chatgpt已经为会员用户切换为gpt4.0模型. 未来短期时间内应该不会开放给免费用户使用.
GPT模型本质是续写模型, 它根据输入的文本生成相应的续写文本, 从而实现对话、文章等自然语言文本的生成. 所以其并不具备实际的创新能力, 只能对以往的“经验”做出梳理.
LLMs # Large language models (LLMs)大语言模型, 包括GPT和GLM等, 是一个统称. 以下是这个统称下的不同模型架构：
主流预训练模型架构 # autoregressive自回归模型（AR模型）：代表作GPT. 本质上是一个left-to-right的语言模型. 通常用于生成式任务, 在长文本生成方面取得了巨大的成功, 比如自然语言生成（NLG）领域的任务：摘要、翻译或抽象问答. 当扩展到十亿级别参数时, 表现出了少样本学习能力. 缺点是单向注意力机制, 在NLU任务中, 无法完全捕捉上下文的依赖关系.
autoencoding自编码模型（AE模型）：代表作BERT. 是通过某个降噪目标（比如MLM）训练的双向文本编码器. 编码器会产出适用于NLU任务的上下文表示, 擅长领域主要是自然语言处理领域, 例如文本分类、命名实体识别、情感分析、问答系统等. 但无法直接用于文本生成.
encoder-decoder（Seq2seq模型）：代表作T5. 采用双向注意力机制, 通常用于条件生成任务, 比如文本摘要、机器翻译等.
GLM模型基于autoregressive blank infilling方法, 结合了上述三种预训练模型的思想, 代表有清华大学的ChatGLM
LoRA和Prompt # Prompt 提示词, 是一种用于指导模型生成输出的文本片段, Prompt通常包含一些关键词或短语, 用于提示模型生成特定类型的文本. Prompt的使用可以提高模型的生成效果和准确性, 特别是在处理特定领域的文本时. 通过使用Prompt, 模型可以更好地理解输入文本的含义和上下文信息, 从而生成更加符合要求的输出文本. LoRA英文全称Low-Rank Adaptation of Large Language Models, 直译为大语言模型的低阶适应, 是一种PEFT（参数高效性微调方法）, 这是微软的研究人员为了解决大语言模型微调而开发的一项技术.</description></item><item><title/><link>http://example.org/posts/capital-incasion/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>http://example.org/posts/capital-incasion/</guid><description>谈资本入侵 # 资本并非单指金钱，而是包含技术、资金、教育、媒体宣传、价值观念乃至社会架构以及运行体系的综合产物。
资本会流动，会向最有利可图的地方大规模聚集。而它的源头，就是资本过剩地方。
资本涌入当地，使用即已成型的技术建厂，从本源地转来过剩的产品。同时开动政治资本、话语资本(媒体)为招工、销售铺平道路。
它们其实无需在意开出的工资。于是给出极具诱惑的薪酬，并逐步渗入教育、最大化利用当地资源为自己下游产业生产线培养专科人才。
资源资本化 # 当人在一处聚集，有了可观的收入、暴富所产生的消费欲快速膨胀。无论是被动的还是主动的，快消品、奢饰品、追求感官刺激的体验消费，完全颠覆以往生活所形成的认知观念。而这些消费为资本带来第一轮的先期收割外，还将被话语媒体资本的助力下充斥到各处欠资本地区，吸纳更多的人前来。
而我们去了，首先要做对的就是接受管理。他们会告诉我们什么叫做“高效”，“先进”，诸如此类词汇，但无一例外的都是将管理成本向劳动者转嫁。
“进城打工潮”一旦形成，各地为了促进当地发展以及挽留劳动力，不得不实施“亲资本”的政策。从政策面鼓励，以低廉的方式划出工业用地。（由此，城市中土地政策宽松，乡村土地使用政策收紧。资本周边大面积征用农民土地、拆迁问题一定会出现。借贷和税收政策也一定会在两地之间形成差异）&amp;ndash;外来资本完成对当地人力资源、政府资源、土地资源的廉价征用，全部服务于本资本在“买全球、卖全球”的产品制造。
资源捆绑化 # 当资本输入地原住民分批得利消费理念逐步冷静&amp;ndash;当然这并非个体绝对。积蓄开始随时间累积，劳动密集型的产业带来的工伤密集冲击着劳动者身体素质。
时间跨度逐步拉长，原住民对于蓬勃发展的“城市”的长久繁荣的信心也在累积。医疗、教育和住房需求开始浮现。积蓄变得重要，理财也变得重要。
这将是资本的第二轮攻势。凭借“主场优势”，其更易于治疗其所带来的工伤。资本的培养体系也更容易为自己体系内部培养人力资本。借此优势将教育与医疗资源集中，边缘化输入地原有医疗和教育体系，形成越好更好，越差更差的趋向。几乎理所当然的大规模大比例占用社会资金，完成了人力资本培养，人力资本修复的代价向外转嫁，且代价也在为自己提供收益。
摘取果实 # 如果说创造就业是播下了种子，快消、奢侈、体验型消费满足了种子各种各样的幻想。医疗和教育的捆绑无时无刻在滋养着种子成长。那胜利的果实就是房地产和坚固的金融。
自古以来，累积积蓄、购置田产是繁荣社会中必然进行的活动。但在公有制下乡村之中，地是集体的，且在前已经说过：乡村中土地政策是必然收紧的。所以替代物它必须出现，在资本的操纵下，它必然出现在城市。两个一辈子在乡村务农的老农，其儿女生养在乡村，但成婚前必须在城中买房，为什么？
因为城中房自资本兴建的一开始，就绝不是以解决入城人住宿问题而产生的。它自一开始就裹挟着各项资源和特权。当“新增人口永不分地”写入法律，一面是先行者得利，一面是铜墙铁壁。大势所趋。
不是风险厌恶型的资本不是好资本 # 用自己的钱去建房，风险全是自己的&amp;ndash;这肯定不行；拉银行一起，“坏账”风险是银行的&amp;ndash;这稍微进步了一点；再把购房者拉上，先收一波回款&amp;ndash;风险到这儿基本分担完了；但收得是全款，花是慢慢花，那把闲的钱再去撬动更多资金呢？&amp;ndash;这简直绝佳。
银行也是好资本。“坏账”风险一定要转嫁出去&amp;ndash;包装成“金融产品”交由社会上的“闲钱”共力承担。
在这样的体系中，由资本一开始推动的巨轮滚滚向前。资本已经无需再投入，在社会承担所有风险的保证下，在社会的过往劳动（积蓄）、现实劳动、未来劳动（负债）中大口大口获取剩余。而这个社会终将走向无力消费，资本终将再无剩余可以榨取，它们必须奔向向另外一片沃土。而那个地方，在现在或许已经进化成无需是一个现实存在的地方。
逃不走的人怎么办 # 留下的人&amp;ndash;被抛弃的人只剩下两个选项：
想方设法无论如何也要寻求资本的认同，乞求带上他一起玩 承担资本流出后转嫁在自己身上的风险 第一个不讨论，有一个收编流程已经运行了数千年，可惜近代被废了。
那资本撤出一定会导致风险爆发吗？ # 这个问题不对，或者是说反了。在资本已经不限于压榨现有劳动剩余，对人力资源进行过往、未来尽数压榨的机制下，市场已经再无潜力和活力。资本已预料到会有风险爆发，所以才主动撤出，去寻求新的地方。否则新兴资本家必然会反制传统资本家，一如一开始它们涌入此地时所做的那样。当资本所带来的就业行业转入生产过剩，资本带来的核心技术转移或断供。而为资本中间环节培养、而非为当地社会培养人成为无用之才。早期既得利益者也无力完成产业升级，还要忙着第1条线路。
工人下岗，左脚踏右脚一飞冲天的最原始驱动力无力抵抗一环扣一环的风险所带来的阻力。</description></item></channel></rss>